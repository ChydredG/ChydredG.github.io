<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flex布局</title>
      <link href="/2022/10/23/Flex%E5%B8%83%E5%B1%80/"/>
      <url>/2022/10/23/Flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2022/10/21/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/21/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="一、JS的组成"><a href="#一、JS的组成" class="headerlink" title="一、JS的组成"></a>一、JS的组成</h2><h3 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1.ECMAScript"></a>1.ECMAScript</h3><ul><li>JavaScript语法</li></ul><h3 id="2-DOM"><a href="#2-DOM" class="headerlink" title="2.DOM"></a>2.DOM</h3><ul><li>页面文档对象模型：操作控件</li></ul><h3 id="3-BOM"><a href="#3-BOM" class="headerlink" title="3.BOM"></a>3.BOM</h3><ul><li>浏览器对象模型：操作浏览器弹窗之类的</li></ul><h2 id="二、注释写法"><a href="#二、注释写法" class="headerlink" title="二、注释写法"></a>二、注释写法</h2><p>与Java一致</p><h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1.单行注释"></a>1.单行注释</h3><ul><li>&#x2F;&#x2F; 注释内容  快捷键 Ctrl + &#x2F;</li></ul><h3 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2.多行注释"></a>2.多行注释</h3><ul><li>&#x2F;* 注释内容 *&#x2F;   框选内容后按快捷键  Alt + shift + a</li></ul><h2 id="三、模板字符串"><a href="#三、模板字符串" class="headerlink" title="三、模板字符串"></a>三、模板字符串</h2><h3 id="1-用反引号包含-96-96"><a href="#1-用反引号包含-96-96" class="headerlink" title="1.用反引号包含&#96;&#96;"></a>1.用反引号包含&#96;&#96;</h3><h3 id="2-可用占位符包含变量方便显示"><a href="#2-可用占位符包含变量方便显示" class="headerlink" title="2.可用占位符包含变量方便显示"></a>2.可用占位符包含变量方便显示</h3><h3 id="3-换行直接打回车即可"><a href="#3-换行直接打回车即可" class="headerlink" title="3.换行直接打回车即可"></a>3.换行直接打回车即可</h3><h3 id="4-可以使用三元表达式"><a href="#4-可以使用三元表达式" class="headerlink" title="4.可以使用三元表达式"></a>4.可以使用三元表达式</h3><h2 id="四、基本语法"><a href="#四、基本语法" class="headerlink" title="四、基本语法"></a>四、基本语法</h2><h3 id="1-JS引入"><a href="#1-JS引入" class="headerlink" title="1.JS引入"></a>1.JS引入</h3><ul><li><p>行内、内嵌、外部引入</p></li><li><p>引入语法：</p><p><code>&lt;script src=&quot;js文件位置&quot;&gt; 注意这里不能写东西 &lt;/script&gt;</code></p><p><strong>该双标签内不可写东西！！！！！！！！！！！！</strong></p></li></ul><h3 id="2-简单的输入输出"><a href="#2-简单的输入输出" class="headerlink" title="2.简单的输入输出"></a>2.简单的输入输出</h3><ul><li><p>浏览器输出：<code>alert(msg)</code></p></li><li><p>控制台输出：<code>console.log(msg)</code>  <strong>输出多个变量用逗号隔开即可</strong></p></li><li><p>弹出用户输入框：<code>prompt(info)</code>  <strong>info为提示文字！</strong></p><p><code>var age = prompt(请输入您的年龄：)</code></p><p>输入值即是age的值，属于<strong>字符串类型！！</strong></p></li><li><p>以上均为浏览器操作</p></li></ul><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><h4 id="①-简单数据类型"><a href="#①-简单数据类型" class="headerlink" title="①.简单数据类型"></a>①.简单数据类型</h4><ul><li><p>Number数字型 </p><p>浮点数、整数、不同进制数均为数字型，不同进制表达：</p><p>二进制：在数前面加个0b代表二进制：0b10：2</p><p>八进制：在数前面加个0代表八进制：010：8</p><p>十六进制：在数前面加个0x代表十六进制：0xa：10</p><p>数字型的最大值：Number.MAX_VALUE</p><p>最小值：Number.MIN_VALUE</p><p>无穷大：Infinity</p><p>无穷小：-Infinity</p><p>非数值：NaN 当数字与字符串做运算时的结果就是NaN</p><p>函数isNaN(x)：判断x是否为NaN，返回true或false</p></li><li><p>Boolean布尔型</p><p>true  false</p><p>与数字型运算时：true按 1 算，false按 0 算</p></li><li><p>String字符串</p><p>字符串用单引号双引号都可以： “字符串”     ‘字符串’</p><p><strong>单个字符也属于字符串</strong></p><p>转义字符 &#x2F; ：</p><p>字符串中有双引号，可以拿单引号来包含字符串，也可以在双引号前加上 ‘&#x2F;‘ 来转义</p><p>字符串长度：x.length 字符串x的长度</p><p>字符串可以和其他任意类型数据用 + 拼接，结果仍是字符串</p><p><strong>占位符拼接：${ 变量名 }即可</strong></p></li><li><p>Undefined  如果变量被声明了但是没给值，就是undefined</p><p>可以直接定义，输出为undefined</p><p>与字符串拼接会直接拿undefined接上，结果为字符串</p><p>与数字型运算时结果为NaN</p></li><li><p>Null空值</p><p>与字符串拼接会直接拿null接上，结果为字符串</p><p>与数字型相加时结果就是该数字</p></li><li><p><strong>JS中变量的数据类型可以随意变换！！！！！！！！！！！！！！！！</strong></p></li><li><p>typeof 查看变量数据类型   typeof x 查看x数据类型   注意typeof空格后<strong>直接加变量，没有括号</strong></p></li></ul><h4 id="②-复杂数据类型"><a href="#②-复杂数据类型" class="headerlink" title="②.复杂数据类型"></a>②.复杂数据类型</h4><ul><li>Object 对象</li></ul><h3 id="4-数据类型强制转换"><a href="#4-数据类型强制转换" class="headerlink" title="4.数据类型强制转换"></a>4.数据类型强制转换</h3><p>由于prompt取来的值属于字符串，我们可以把它转换为我们想要的类型</p><ul><li><p>将x转换为字符串</p><p>1.x.toString()</p><p>2.String(x)</p><p>3.与一个空字符串 ‘’ 相加（隐式转换）</p></li><li><p>将x转换为数字型</p><p>1.parseInt(x) 转换为整数</p><ul><li>x为 ‘3.14’ ‘3.98’ <strong>直接取整</strong>为 3</li><li>x为 ‘120px’ 数字开头，<strong>直接去掉后续字母</strong>为120</li><li>第一个字符不是数字则直接转换为NaN</li></ul><p>2.parseFloat(x) 转换为浮点数</p><ul><li>与1相似</li></ul><p>3.Number(x) </p><p>4.运用算数运算 -  *  &#x2F;  转换，<strong>不可以用 + ！</strong>（隐式转换）</p></li><li><p>将x转换为布尔型</p><p>1.Boolean(x) 将x转换为布尔型</p><p>2.x为 ‘’ 、0 、NaN 、null 、undefined时转换为false，其余值转换为true</p></li></ul><h3 id="5-数据类型隐式转换"><a href="#5-数据类型隐式转换" class="headerlink" title="5.数据类型隐式转换"></a>5.数据类型隐式转换</h3><ul><li>数字字符串加数字,数字隐式转换为字符串</li><li>数字字符串与数字做非加法运算,字符串隐式转换为数字</li><li>数字字符串与数字字符串做非加法运算,隐式转换为数字</li></ul><h3 id="6-变量"><a href="#6-变量" class="headerlink" title="6.变量"></a>6.变量</h3><ul><li><p>关键字  变量名  &#x3D;  值</p></li><li><p>关键字有var 、 let 、 const</p></li><li><p>区别：</p></li><li><p><strong>变量的数据类型可以随意变换</strong></p></li></ul><h3 id="7-运算符"><a href="#7-运算符" class="headerlink" title="7.运算符"></a>7.运算符</h3><ul><li><p>基础运算符：</p><p>与Java相同 + - * &#x2F; %</p><p>注意一点浮点数运算时会出现精度问题：</p><p>0.1 + 0.2 &#x3D; 0.3000……04 (17位小数) </p><p>前置递增 ++i ：先自增1，再返回值</p><p>后置递增 i++ ：先返回值，再自增1</p></li><li><p>比较运算符：</p><p>与Java大致相同</p><p>注意：</p><p>&#x3D;&#x3D;： 只要求值相同，比如 18 &#x3D;&#x3D; ‘18’   —— true</p><p><strong>&#x3D;&#x3D;&#x3D; ：全等  要求值相同，数据类型也相同，推荐使用！</strong></p><p>!&#x3D;&#x3D; ：不全等</p></li><li><p>逻辑运算符：</p><p>与Java大致相同： &amp;&amp;  ||  !</p><p>非布尔值参与逻辑运算：</p><p>短路运算（逻辑中断）逻辑与：</p><ul><li>如果第一个表达式为真，则返回表达式2     123 &amp;&amp; 456 —— 456</li><li>如果第一个表达式为假，则返回表达式1      0 &amp;&amp; 456 —— 0</li></ul><p>短路运算（逻辑中断）逻辑或：</p><ul><li>如果第一个表达式为真，则返回表达式1     123 || 456 —— 123</li><li>如果第一个表达式为假，则返回表达式2     0 || 456 —— 456</li></ul><p><strong>逻辑中断中有多个逻辑运算符时依次运算即可</strong></p><p><strong>优先级：先&amp;&amp; 后||</strong></p></li><li><p>赋值运算符：</p><p>num +&#x3D; n;  ——  num &#x3D; num + n;</p></li><li><p>三元表达式：</p><p>x &#x3D; 逻辑表达式  ?  表达式1  :  表达式2   </p><p>逻辑表达式真，则x &#x3D; 表达式 1 ， 反之 &#x3D; 表达式2</p></li></ul><h3 id="8-数组"><a href="#8-数组" class="headerlink" title="8.数组"></a>8.数组</h3><ul><li><p>三种定义方式：</p><p><code>let 变量名 = new Array[];</code></p><p><code>let 变量名 = [];</code>      空数组</p><p><code>let 变量名 = [数据1 , 数据2 , .........]</code></p><p>注意：<strong>JS数组中数据的类型可以是任意的，甚至可以是数组</strong></p><p><strong>访问不存在的索引或索引所在处无数据时得到：undefined</strong></p></li><li><p>数组长度：变量名.length</p></li><li><p>增加数组长度：</p><p>1.直接给  数组名.length  赋更大的值即可</p><p>2.给追加索引处赋值</p></li><li><p>数组筛选：length的巧用！</p></li><li><p>数组的元素操作：</p><p>①.增</p><ul><li><p>1.push方法(从数组末尾加数据)：</p><p>变量名.push(“要添加的值”);</p><p>添加多个值用逗号隔开即可</p></li><li><p>2.unshift方法(从数组头加数据)：</p><p>使用方法与①相同</p></li></ul><p>②.删</p><ul><li><p>1.pop方法(在数组末尾删除一个元素)：</p><p>变量名.pop();</p></li><li><p>2.shift方法(在数组开头删除一个元素)：</p><p>变量名.shift();</p></li><li><p>3.splice方法(根据索引删除数组指定位置的元素)：</p><p>变量名.splice(索引1 , 索引2 , …..);</p></li></ul><p>③.改</p><ul><li>splice方法</li></ul><p>④.查</p><ul><li>indexOf方法</li></ul></li></ul><h3 id="9-循环"><a href="#9-循环" class="headerlink" title="9.循环"></a>9.循环</h3><ul><li>for…in循环</li><li>for…of循环</li><li>break;结束循环</li><li>continue;结束本次循环，开始下次循环</li></ul><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><ul><li><p>函数声明：</p><p> function 函数名 (参数 , 参数 , ……){   }  调用： 函数名()</p><p><strong>声明中参数不用加关键字，直接写参数名就可以</strong></p></li><li><p>JS中函数内依然可以定义函数</p></li><li><p>如果调用函数时参数不匹配，多的没影响，少的参数值就是undefined</p></li><li><p>返回值用return</p></li><li><p>没有return则返回undefined</p></li></ul><h3 id="10-预解析"><a href="#10-预解析" class="headerlink" title="10.预解析"></a>10.预解析</h3><ul><li><p>JS引擎运行分为两步:1.预解析2.代码执行</p><p>1.预解析：js引擎会把js里面所有的<strong>变量声明和函数声明</strong>提升到当前作用域的最前面</p><p>2.代码执行：按照代码书写的顺序从上往下执行</p></li><li><p>2．预解析分为变量预解析（变量提升）和函数预解析（函数提升)</p></li><li><p>(1）变量提升就是把所有的变量声明提升到当前的作用域最前面不提升赋值操作(2）函数提升就是把所有的函数声明提升到当前作用域的最前面不调用函数</p></li></ul><h3 id="11-对象"><a href="#11-对象" class="headerlink" title="11.对象"></a>11.对象</h3><ul><li><p>对象的创建：对象中定义方法中的函数为匿名函数</p></li><li><p>属性调用：</p><p>1.对象名.属性</p><p>2.对象名 [‘属性名’] </p><p>1.字面量创建：</p><p><code>let  对象名 = &#123;</code></p><p>​       <code>属性1: 值</code></p><p>​       <code>属性2: 值</code></p><p>​       <code>方法1: function() &#123;&#125;</code></p><p>​          <code>...</code></p><p><code>&#125;</code></p><p>2.new Object创建：</p><p><code>let  对象名 = new Object()</code></p><p><code>对象名.属性1: 值</code></p><p><code>对象名.属性2: 值</code></p><p><code>对象名.方法1: function() &#123;&#125;</code></p><p>​          <code>...</code></p><p><code>&#125;</code></p><p>3.构造函数创建：</p><p><code>function  构造函数名( x , y , .....)&#123;</code></p><p>​       <code>this.属性1 = x;</code></p><p>​       <code>this.属性2 = y;</code></p><p>​       <code>this.方法1 = function() &#123;&#125;</code></p><p><code>&#125;</code></p><p><code>var 对象名 = new 构造函数名(属性1 , 属性2 , ...);</code></p><p><strong>构造函数实例化需要new   var 对象名 &#x3D; new 构造函数名();</strong></p></li><li><p>for…in…对象属性遍历：</p><p><code>for (let  k  in  对象名)&#123;</code></p><p>​    <code>consule.log( k );   输出属性名</code></p><p>​    <code>consule.log( 对象名[k] );    输出属性值</code></p><p><code>&#125;</code></p><p>方法也可以遍历出来</p></li><li><p>Object.keys(对象名)可以得到该对象的所有属性名</p></li><li><p>属性的删除和增加</p></li></ul><h2 id="四、JS内置对象"><a href="#四、JS内置对象" class="headerlink" title="四、JS内置对象"></a>四、JS内置对象</h2><p>JS对象有三种：自定义对象，内置对象，浏览器对象</p><h3 id="1-Math数学对象"><a href="#1-Math数学对象" class="headerlink" title="1.Math数学对象"></a>1.Math数学对象</h3><h3 id="2-Date日期对象"><a href="#2-Date日期对象" class="headerlink" title="2.Date日期对象"></a>2.Date日期对象</h3><h3 id="3-数组对象"><a href="#3-数组对象" class="headerlink" title="3.数组对象"></a>3.数组对象</h3><h3 id="4-字符串对象"><a href="#4-字符串对象" class="headerlink" title="4.字符串对象"></a>4.字符串对象</h3><h2 id="五、DOM文档对象模型"><a href="#五、DOM文档对象模型" class="headerlink" title="五、DOM文档对象模型"></a>五、DOM文档对象模型</h2><h3 id="1-DOM树"><a href="#1-DOM树" class="headerlink" title="1.DOM树"></a>1.DOM树</h3><ul><li>文档:一个页面就是一个文档，DOM中使用document表示</li><li>元素∶页面中的所有标签都是元素，DOM中使用element表示</li><li>节点︰网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示</li><li>一个标签如果没有任何子标签，则他的孩子节点是它里面的文本，但数据类型依然是Object</li></ul><h3 id="2-获取DOM-主选H5新增"><a href="#2-获取DOM-主选H5新增" class="headerlink" title="2.获取DOM (主选H5新增)"></a>2.获取DOM (主选H5新增)</h3><ul><li><p>元素获取数据类型为object</p></li><li><p>1.id获取</p><p>let 变量名 &#x3D; document.getElementById(“标签id”);</p></li><li><p>2.标签名获取</p><p>var 变量名 &#x3D; document.getElementsByTagName(“标签名”);</p><p>注意：这里返回的是元素对象的集合，以伪数组的形式存储</p><p>如果页面中没有该标签，则返回空的伪数组，打印出来是undefined</p><p>如果想获得父元素中的子元素：</p><p>可以先把父元素获取出来，再通过 父元素名.getElementsByTagName(“标签名”)获得子标签</p></li><li><p><strong>3.H5新增方法获取</strong> <strong>②③用的最多 其他的记住就行！！！！！！！！</strong></p><p>①.根据类名获得元素集合，伪数组方式存储：</p><p>var 变量名 &#x3D; document.getElementsByClassName(“类名”);</p><p><strong>!!!②</strong>.获得指定选择器的<strong>第一个元素</strong>对象，<strong>里面要加选择器符号 . #</strong> ：</p><p>var 变量名 &#x3D; document.querySelector(“<strong>.类名</strong>“) &#x2F; (“<strong>#id名</strong>“); </p><p><strong>括号里还可以写完整的选择器名 (.nav .subtitles)</strong></p><p><strong>还可以写标签名加选择器名 (div.nav) &#x2F; (div#nav)</strong></p><p><strong>!!!③</strong>.获得指定选择器内<strong>所有元素对象，伪数组方式存储</strong>，**里面要加选择器符号 . #**：</p><p>var 变量名 &#x3D; document.querySelectorAll(“<strong>.类名</strong>“) &#x2F; (“<strong>#id名</strong>“);</p><p><strong>与上述相同，也可以直接写完整的选择器</strong></p></li><li><p>4.特殊元素获取</p><p>①.获取body元素：</p><p>document.body 返回body元素对象</p><p>②.获取html元素：</p><p>document.documentElement 返回html元素对象</p></li></ul><h3 id="3-DOM事件"><a href="#3-DOM事件" class="headerlink" title="3.DOM事件"></a>3.DOM事件</h3><ul><li><p>事件三要素：</p><p>①.事件源：获得元素对象</p><p>②.事件类型：鼠标点击、进入、退出等如何触发事件</p><p>③.事件处理程序：通过一个函数赋值的方式完成</p></li><li><p>执行事件的过程：</p><p>①.获取事件源</p><p>②.注册绑定事件</p><p>③.添加事件处理程序</p></li><li><p><strong>变量名.addEventListener(“事件类型” , function(){ 事件操作 });  这是现在官方认定的绑定操作</strong></p></li></ul><h3 id="4-DOM操作"><a href="#4-DOM操作" class="headerlink" title="4.DOM操作"></a>4.DOM操作</h3><ul><li><p>元素操作：</p><ul><li><p>①.修改元素内文本：变量名.innerText &#x2F; 变量名.innerHTML</p><p>区别：innerText会去除里面的html标签，且空格和换行也会被去掉 innerHTML则不会</p><p>建议使用innerHTML</p></li><li><p>②.大多数元素内容属性修改：变量名.属性名 &#x3D; 修改内容; </p></li><li><p>③.表单元素属性操作：</p><p>可操作属性：type、value、checked、selected、disabled等</p></li><li><p>④.元素样式属性修改：</p><ul><li><p>行内样式操作：变量名.style.属性名(驼峰命名) &#x3D; “具体样式”;</p><p>要修改的样式少这样写，多的话要重复很多遍变量名.style，很麻烦</p></li><li><p>类名样式操作：在CSS中写一份改变后的类名选择器样式</p><p>然后通过JS将该类名赋给这个元素对象即可：</p><p>变量名.style.className &#x3D; “类名”  <strong>不用加.</strong></p><p>适合功能修改复杂的情况，但是会<strong>覆盖掉元素原先的类名</strong></p><p>要保留原先的类名，只需在赋值类名时把原先的类名加上就行：</p><p>变量名.style.className &#x3D; “旧类名 新类名”</p></li><li><p>JS修改后的样式属于行内样式，权重最高</p></li></ul></li><li><p>⑤.自定义样式：</p><p>上述获取属性是可读可写的，即通过变量名.属性名可以获得属性的值</p><p>实际开发中常常出现内置属性不够用的情况，会有程序员自己定义一些属性样式，怎么获得它们的值？</p><p>变量名.getAttribute(“属性名&#x2F;自定义属性名”);</p><p>可以获得内置属性值，也可以获得自定义属性值</p><p>如何设置自定义属性值呢？</p><p>变量名.setAttribute(“属性名”,”值”);</p><p>移除属性：</p><p>变量名.removeAttribute(“属性名”);</p></li><li><p>排他思想</p></li></ul></li></ul><h3 id="5-节点"><a href="#5-节点" class="headerlink" title="5.节点"></a>5.节点</h3><ul><li><p>标签为元素节点、标签的属性为属性节点，标签中的文本为文本节点，节点至少有nodeName、nodeType、nodeValue三个属性</p></li><li><p>节点创建：</p></li><li><p>页面中所有内容都是节点node，也都是Element，不同的是nodeType：</p><p>元素节点 nodeType &#x3D; 1  nodeName &#x3D; 标签名  nodeValue &#x3D; null</p><p>属性节点 nodeType &#x3D; 2  nodeName &#x3D; 属性名  nodeValue &#x3D; 属性值</p><p>文本节点 nodeType &#x3D; 3  nodeName &#x3D; #text     nodeValue &#x3D; 文本内容</p></li><li><p>attributes可以获得元素节点的所有属性，得到的结果是一个字典，可以通过属性名来获得对应的属性节点</p><p>eg：</p><p><code>let div = document.querySelector(&quot;  &quot;);</code> </p><p><code>let divid = div.attributes.id;</code></p><p><code>consule.log( divid.nodeName , divid.nodeValue );</code></p></li></ul><h3 id="6-DOM属性"><a href="#6-DOM属性" class="headerlink" title="6.DOM属性"></a>6.DOM属性</h3><ul><li><p>DOM属性</p><p>DOM.className  返回的是一个字符串 值为DOM类名</p><p>DOM.classList      返回的是一个包含所有DOM类名的数组</p><p>DOM.style            返回的是存储DOMCSS样式的对象或字典  但是只能返回行内的样式，CSS文件中的无法返回</p></li><li><p>DOM内容</p><p>DOM.outerHTML：   包含DOM本身标签的HTML代码</p><p>DOM.innerHTML ：  DOM内部的HTML代码</p><p>DOM.innerText ：     DOM内部的纯文本内容，空格换行都没</p><p>利用DOM.innerHTML &#x3D; “”，可以达到清除所有DOM子节点的效果</p></li><li><p>DOM亲属</p><p>对象名.firstChild 得到第一个儿子节点</p><p>对象名.lastChild 得到最后一个儿子节点</p><p>对象名.childNodes 得到所有子节点的集合(数组)，但是<strong>包括了标签之间的换行符</strong></p><p>对象名.parentNode 得到该节点的父节点</p></li><li><p>DOM数据属性</p><p>data-*</p></li><li><p>DOM属性增删改查</p></li></ul><h3 id="7-使用JS创建HTML标签"><a href="#7-使用JS创建HTML标签" class="headerlink" title="7.使用JS创建HTML标签"></a>7.使用JS创建HTML标签</h3><ul><li><p>1.新建一个节点对象 (注意只是一个对象，这时候还没加到HTML里去)</p><p>新建标签节点对象：let 对象名1 &#x3D; document.createElement(“新标签名”);</p><p>新建文本节点对象：let 对象名2 &#x3D; document.createElement(“文本内容”);</p><p>将文本节点加到标签节点中：对象名1.appendChild(对象名2);</p></li><li><p>2.把这个节点对象加到想要加的标签位置</p><p>①.在所有儿子节点之后添加：</p><p>目标节点对象.appendChild(节点对象名);</p><p>②.目标节点对象.insertBefore(节点对象名 , 儿子节点对象)</p></li><li><p>属性的增删改查</p><p>3.给新添加的标签加属性</p><p>对象名.setAttribute( “属性名” , “属性值”);</p><p>如果是加样式，则属性名为style，属性值为具体样式表</p><p>样式属性还可以单独设置：</p><p>对象名.style.样式属性名 &#x3D; “属性值”</p></li></ul><h2 id="六、BOM浏览器对象模型"><a href="#六、BOM浏览器对象模型" class="headerlink" title="六、BOM浏览器对象模型"></a>六、BOM浏览器对象模型</h2><p>主要的浏览器对象模型有以下五种</p><h3 id="1-window"><a href="#1-window" class="headerlink" title="1.window"></a>1.window</h3><ul><li>窗口，window是整个网页的框架，每个网页的内容都是装载在window里面</li><li>属性：</li><li>方法：</li></ul><h3 id="2-navigator"><a href="#2-navigator" class="headerlink" title="2.navigator"></a>2.navigator</h3><ul><li>浏览器，navigator 表示用户代理的状态和标识，也就是存储浏览器基本信息</li><li>属性：userAgent</li><li>方法：</li></ul><h3 id="3-history"><a href="#3-history" class="headerlink" title="3.history"></a>3.history</h3><ul><li>历史，我们知道每个网页可以前进后退，history便拿来存储整个网页栈的</li><li>属性：</li><li>方法：back() forward()</li></ul><h3 id="4-screen"><a href="#4-screen" class="headerlink" title="4.screen"></a>4.screen</h3><ul><li>显示屏幕，screen包含我们显示屏幕的信息，这个是硬件信息</li><li>属性：</li><li>方法：</li></ul><h3 id="5-location"><a href="#5-location" class="headerlink" title="5.location"></a>5.location</h3><ul><li>地址，location包含当前访问的地址（网址）信息</li><li>属性：</li><li>方法：reload()</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>H5C3零碎知识点</title>
      <link href="/2022/10/18/H5C3%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/10/18/H5C3%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5与CSS3的新增标签与特性</title>
      <link href="/2022/10/18/HTML5%E4%B8%8ECSS3%E7%9A%84%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E4%B8%8E%E7%89%B9%E6%80%A7/"/>
      <url>/2022/10/18/HTML5%E4%B8%8ECSS3%E7%9A%84%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E4%B8%8E%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、HTML5新标签"><a href="#一、HTML5新标签" class="headerlink" title="一、HTML5新标签"></a>一、HTML5新标签</h2><h3 id="1-新增语义化标签"><a href="#1-新增语义化标签" class="headerlink" title="1.新增语义化标签"></a>1.新增语义化标签</h3><ul><li><p><code>&lt;header&gt;</code>：头部标签</p></li><li><p><code>&lt;nav&gt;</code>：导航标签</p></li><li><p><code>&lt;aside&gt;</code>：侧边栏标签</p></li><li><p><code>&lt;article&gt;</code>：内容标签</p></li><li><p><code>&lt;section&gt;</code>：定义文档的某个区域</p></li><li><p><code>&lt;main&gt;</code>：主体标签</p></li><li><p><code>&lt;footer&gt;</code>：尾部标签</p><p>以上标签均为双标签，本质上与<code>&lt;div&gt;</code>相同，只是改了名字提高可读性</p></li></ul><h3 id="2-新增视频标签-lt-video-gt"><a href="#2-新增视频标签-lt-video-gt" class="headerlink" title="2.新增视频标签 &lt;video&gt;"></a>2.新增视频标签 <code>&lt;video&gt;</code></h3><ul><li><p>用法：</p><p><code>&lt;video controls=&quot;controls&quot; width=&quot;300&quot;&gt;</code></p><p>​    <code>&lt;source src=&quot;move.ogg&quot; type=&quot;video/ogg&quot; &gt;</code></p><p>​    <code>&lt;source src=&quot;move.mp4&quot; type=&quot;video/mp4&quot; &gt;</code></p><p>​    <code>您的浏览器暂不支持&lt;video&gt;标签</code></p><p><code>&lt;/video &gt;</code></p></li><li><p>具体属性：</p><img src="/2022/10/18/HTML5%E4%B8%8ECSS3%E7%9A%84%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E4%B8%8E%E7%89%B9%E6%80%A7/1.png" class title="视频标签常用属性"></li></ul><h3 id="3-新增音频标签-lt-audio-gt"><a href="#3-新增音频标签-lt-audio-gt" class="headerlink" title="3.新增音频标签 &lt;audio&gt;"></a>3.新增音频标签 <code>&lt;audio&gt;</code></h3><ul><li><p><code>&lt;audio controls=&quot;controls&quot; &gt;</code></p><p>​    <code>&lt;source src=&quot;happy.ogg&quot; type=&quot;audio/ogg&quot; &gt;</code></p><p>​    <code>&lt;source src=&quot;happy.mp3&quot; type=&quot;audio/mp3&quot; &gt;</code></p><p>​    <code>您的浏览器暂不支持&lt;audio&gt;标签</code></p><p><code>&lt;/audio &gt;</code></p></li><li><p>具体属性：</p><img src="/2022/10/18/HTML5%E4%B8%8ECSS3%E7%9A%84%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E4%B8%8E%E7%89%B9%E6%80%A7/2.png" class title="音频标签常用属性"></li></ul><h3 id="4-新增input表单"><a href="#4-新增input表单" class="headerlink" title="4.新增input表单"></a>4.新增input表单</h3><ul><li><p>input标签新增type：</p><img src="/2022/10/18/HTML5%E4%B8%8ECSS3%E7%9A%84%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E4%B8%8E%E7%89%B9%E6%80%A7/3.png" class title="input标签新增类型"></li></ul><h3 id="5-新增表单属性"><a href="#5-新增表单属性" class="headerlink" title="5.新增表单属性"></a>5.新增表单属性</h3><ul><li><p>input标签新增属性：</p><img src="/2022/10/18/HTML5%E4%B8%8ECSS3%E7%9A%84%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E4%B8%8E%E7%89%B9%E6%80%A7/4.png" class title="input标签新增属性"></li></ul><h2 id="二、CSS3新增选择器"><a href="#二、CSS3新增选择器" class="headerlink" title="二、CSS3新增选择器"></a>二、CSS3新增选择器</h2><h3 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="1.属性选择器"></a>1.属性选择器</h3><ul><li><code>E[att]</code>  选择具有att属性的E标签元素</li><li><code>E[att=&quot;val&quot;]</code>  选择具有att属性且属性值等于val的E标签元素</li><li><code>E[att^=&quot;val&quot;]</code>  匹配具有att属性且值以val开头的E标签元素</li><li><code>E[att$=&quot;val&quot;]</code>  匹配具有att属性且值以val结尾的E标签元素</li><li><code>E[att*=&quot;val&quot;]</code>  匹配具有att属性且值中含有val的E标签元素</li><li><strong>属性选择器权重为10</strong></li></ul><h3 id="2-结构伪类选择器"><a href="#2-结构伪类选择器" class="headerlink" title="2.结构伪类选择器"></a>2.结构伪类选择器</h3><ul><li><p><code>E:first-child</code>  匹配父元素中的第一个子元素E</p></li><li><p><code>E:first-child</code>  匹配父元素中的第一个子元素E</p></li><li><p><code>E:last-child</code>  匹配父元素中最后一个E元素</p></li><li><p><code>E:nth-child(n)</code>  匹配父元素中的第n个子元素E</p><p>这个n可以是<strong>数字</strong>，也可以是<strong>odd（奇数）、even（偶数）</strong>，还可以是<strong>表达式</strong>（2n+1，<strong>n是从0开始递增的</strong>，是n本身就代表选择了所有，还可以是**-n+5**，代表前五个）</p></li><li><p><code>E:first-of-type</code>  指定类型E的第一个</p></li><li><p><code>E:last-of-type</code>  指定类型E的最后一个</p></li><li><p><code>E:nth-of-type(n)</code>  指定类型E的第n个</p></li><li><p><strong>注意区别！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</strong></p><p>1.nth-child  对父元素里面所有孩子排序选择（序号是固定的）先找到第n个孩子，然后看看是否和E匹配</p><p>2.nth-of-type  对父元素里面指定子元素进行排序选择。先去匹配E，然后再根据E找第n个孩子</p></li></ul><h3 id="3-伪元素选择器-通过CSS创建新标签元素"><a href="#3-伪元素选择器-通过CSS创建新标签元素" class="headerlink" title="3.伪元素选择器 ( 通过CSS创建新标签元素 )"></a>3.伪元素选择器 ( 通过CSS创建新标签元素 )</h3><ul><li><p><code>E::before</code>  </p></li><li><p><code>E::after</code>  </p></li><li><p>注意！！！！</p><p>1.before在E左侧、after在E右侧，创建一个元素，<strong>但是属于行内元素</strong></p><p>2.新创建的这个元素在文档树中是找不到的，所以我们称为<strong>伪元素</strong></p><p>3.语法: <code>element::before&#123;&#125;</code></p><p>4.**before 和 after 必须有 content 属性 content &#x3D; ‘’ **</p><p>5.before在父元素内容的前面创建元素，after在父元素内容的后面插入元素</p><p>6.伪元素选择器和标签选择器一样，<strong>权重为1</strong>   <strong>div::before{} 权重为2</strong></p></li></ul><h2 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h2><h3 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1.盒子模型"></a>1.盒子模型</h3><ul><li><p><code>box-sizing: content-box</code>  盒子大小为width + padding + border (默认)</p></li><li><p><code>box-sizing: border-box</code>  盒子大小为width</p></li><li><p>如果盒子模型我们改为了 <code>box-sizing: border-box</code>，那 padding 和 border 就<strong>不会撑大盒子</strong>了</p><p>（前提padding和border不会超过width宽度)</p></li></ul><h3 id="2-滤镜filter"><a href="#2-滤镜filter" class="headerlink" title="2.滤镜filter"></a>2.滤镜filter</h3><ul><li><code>filter: 函数();</code></li><li>例如 <code>filter: blur( 5px );</code> blur模糊处理，数值越大越模糊</li></ul><h3 id="3-宽度计算calc函数"><a href="#3-宽度计算calc函数" class="headerlink" title="3.宽度计算calc函数"></a>3.宽度计算calc函数</h3><ul><li><code>width: calc( 100% - 30px );</code> </li><li>()里面可以进行任意四则运算</li></ul><h3 id="4-属性过渡"><a href="#4-属性过渡" class="headerlink" title="4.属性过渡"></a>4.属性过渡</h3><ul><li><p><code>transition: 要过渡的属性   花费时间   运动曲线   何时开始</code></p></li><li><p>1.属性：想要变化的css属性，宽度高度背景颜色内外边距都可以。<strong>如果想要所有的属性都变化过渡，写一个all 就可以。</strong></p></li><li><p>2.花费时间:单位是秒(必须写单位）比如0.5s3.运动曲线:默认是ease (可以省略)</p></li><li><p>3.运动曲线:默认是ease (可以省略)</p><img src="/2022/10/18/HTML5%E4%B8%8ECSS3%E7%9A%84%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E4%B8%8E%E7%89%B9%E6%80%A7/5.png" class title="各种运动曲线及其名称"> </li><li><p>4.何时开始︰单位是秒(必须写单位)可以设置延迟触发时间默认是0s （可以省略)</p></li><li><p>写法：</p><p>1.先写鼠标放上去效果hover</p><p>2.再在原标签里写transition</p><p><strong>3.多个属性过渡只需要在后面加个逗号分割，继续写即可，不能写多个transition</strong></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局技巧</title>
      <link href="/2022/10/15/CSS%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/10/15/CSS%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、溢出显示隐藏元素"><a href="#一、溢出显示隐藏元素" class="headerlink" title="一、溢出显示隐藏元素"></a>一、溢出显示隐藏元素</h2><h3 id="1-display"><a href="#1-display" class="headerlink" title="1.display:"></a>1.display:</h3><ul><li><p><code>display: none;</code> 隐藏对象</p></li><li><p><code>display : block;</code> 除了转换为块级元素之外，同时还有显示元素的意思</p><p>display隐藏元素后，<strong>不再占有</strong>原来的位置</p></li></ul><h3 id="2-visibility"><a href="#2-visibility" class="headerlink" title="2.visibility:"></a>2.visibility:</h3><ul><li><p><code>visibility : visible;</code> 元素可视</p></li><li><p><code>visibility : hidden;</code> 元素隐藏</p><p>visibility隐藏元素后，<strong>继续占有</strong>原来的位置</p></li></ul><h3 id="3-overflow"><a href="#3-overflow" class="headerlink" title="3.overflow:"></a>3.overflow:</h3><ul><li><p><code>overflow: hidden;</code> 不显示超过对象尺寸的内容，超出的部分隐藏掉</p></li><li><p><code>overflow: scroll;</code> 不管超出内容否，总是显示滚动条</p></li><li><p><code>overflow: auto;</code> 超出自动显示滚动条，不超出不显示滚动条</p><p><strong>有定位的盒子慎用</strong></p></li></ul><h2 id="二、精灵图与字体图标"><a href="#二、精灵图与字体图标" class="headerlink" title="二、精灵图与字体图标"></a>二、精灵图与字体图标</h2><h3 id="1-精灵图"><a href="#1-精灵图" class="headerlink" title="1.精灵图"></a>1.精灵图</h3><ul><li>为什么？一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。因此，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术</li><li>原理：精灵图就是把多个小图标及背景加入到一张大图片中，引用时通过给盒子设定大小，再调整图片位置<code>background-position</code> 实现只显示小图标的效果。一般情况下都是往上往左移动，所以数值是负值。</li></ul><h3 id="2-字体图标"><a href="#2-字体图标" class="headerlink" title="2.字体图标"></a>2.字体图标</h3><ul><li>复杂哦</li></ul><h2 id="三、三角做法"><a href="#三、三角做法" class="headerlink" title="三、三角做法"></a>三、三角做法</h2><p>一些网站的菜单往往是一个矩形上方有个小三角，聊天框也是，这个三角怎么做呢？</p><h3 id="1-规则三角"><a href="#1-规则三角" class="headerlink" title="1.规则三角"></a>1.规则三角</h3><ul><li>盒子没有大小宽高都为0，给盒子设置<strong>相同粗细</strong>上下左右边框就可以看到成了一个正方形，这时<strong>把其他三个的背景颜色设置为透明</strong>，仅保留要设置方向三角的边框颜色即可，这样就成了一个<strong>等腰直角三角形</strong>，之后再通过定位调位置就行了</li></ul><h3 id="2-不规则三角"><a href="#2-不规则三角" class="headerlink" title="2.不规则三角"></a>2.不规则三角</h3><ul><li>大致方法与上述相同，<strong>相邻两边边框粗细设置为0</strong>；剩余下两边边框<strong>设置不同的粗细，其中一个设置透明</strong>即可弄出其他形状的直角三角形</li></ul><h2 id="四、垂直居中"><a href="#四、垂直居中" class="headerlink" title="四、垂直居中"></a>四、垂直居中</h2><ul><li><p><code>vertical-align : baseline | top | middle | bottom</code></p></li><li><p>baseline:  默认。元素放置在父元素的基线上</p></li><li><p>top:  把元素的顶端与行中最高元素的顶端对齐</p></li><li><p>middle:  把此元素放置在父元素的中部</p></li><li><p>bottom:  把元素的顶端与行中最低的元素的顶端对齐</p><img src="/2022/10/15/CSS%E5%B8%83%E5%B1%80%E6%8A%80%E5%B7%A7/1.png" class title="字符的几条线"> </li><li><p>由于默认的是基线对齐，所以当有图片和文字在一起的盒子设置边框时会出现图片下方有一条缝隙的情况，这时只需要设置<code>vertical-align : bottom</code>即可消除该缝隙</p></li></ul><h2 id="五、单-x2F-多行文字溢出省略号显示"><a href="#五、单-x2F-多行文字溢出省略号显示" class="headerlink" title="五、单&#x2F;多行文字溢出省略号显示"></a>五、单&#x2F;多行文字溢出省略号显示</h2><h3 id="单行文字溢出省略号显示"><a href="#单行文字溢出省略号显示" class="headerlink" title="单行文字溢出省略号显示"></a>单行文字溢出省略号显示</h3><ul><li><p><code>/* 1.强制不换行 */</code></p><p><code>white-space: nowrap;</code></p><p><code>/* 2.隐藏超出部分 */</code></p><p><code>overflow: hidden;</code></p><p><code>/* 3.用省略号代替剩余内容 */</code></p><p><code>text-overflow: ellipsis;</code></p></li></ul><h3 id="多行文字溢出省略号显示"><a href="#多行文字溢出省略号显示" class="headerlink" title="多行文字溢出省略号显示"></a>多行文字溢出省略号显示</h3><ul><li><p><code>/* 1.隐藏超出部分 */</code></p><p><code>overflow : hidden;</code></p><p><code>/* 2.文本超出就用省略号 */</code></p><p><code>text-overflow: ellipsis;</code></p><p><code>/* 3.把对象作为弹性伸缩盒子模型显示 */</code></p><p><code>display: -webkit-box;</code></p><p><code>/* 4.WebKit内核的浏览器的私有属性，设置文本超出n行就用省略号 n自行设置*/</code></p><p><code>-webkit-line-clamp: n;</code>  </p><p><code>/* 5.WebKit内核的浏览器的私有属性，设置或检索伸缩盒对象的子元素的排列方式 */</code></p><p><code>-webkit-box-orient: vertical;</code></p></li></ul><h2 id="六、margin负值运用"><a href="#六、margin负值运用" class="headerlink" title="六、margin负值运用"></a>六、margin负值运用</h2><h3 id="相邻盒子边框重叠加粗问题"><a href="#相邻盒子边框重叠加粗问题" class="headerlink" title="相邻盒子边框重叠加粗问题"></a>相邻盒子边框重叠加粗问题</h3><ul><li>设置一个 margin-left 负值，值为边框粗细即可</li></ul><h2 id="七、鼠标经过相邻盒子完整高亮显示边框"><a href="#七、鼠标经过相邻盒子完整高亮显示边框" class="headerlink" title="七、鼠标经过相邻盒子完整高亮显示边框"></a>七、鼠标经过相邻盒子完整高亮显示边框</h2><p>经过上述步骤解决了相邻盒子边框粗细问题，但是设置hover让边框鼠标经过高亮时会发现右边框有问题：</p><h3 id="在hover中给盒子添加相对定位"><a href="#在hover中给盒子添加相对定位" class="headerlink" title="在hover中给盒子添加相对定位"></a>在hover中给盒子添加相对定位</h3><ul><li>如果这几个盒子都没有定位，则给选中的盒子添加绝对定位即可，因为绝对定位：<strong>会压住其他标准流的盒子</strong></li></ul><h3 id="在hover中给盒子添加z-index使其高度增高"><a href="#在hover中给盒子添加z-index使其高度增高" class="headerlink" title="在hover中给盒子添加z-index使其高度增高"></a>在hover中给盒子添加z-index使其高度增高</h3><ul><li>如果这几个盒子都加了定位，则设置z-index即可</li></ul><h2 id="八、灵活利用浮动不会压住文字的特性"><a href="#八、灵活利用浮动不会压住文字的特性" class="headerlink" title="八、灵活利用浮动不会压住文字的特性"></a>八、灵活利用浮动不会压住文字的特性</h2><h3 id="此特性可以做出左边图片，右边文字的布局"><a href="#此特性可以做出左边图片，右边文字的布局" class="headerlink" title="此特性可以做出左边图片，右边文字的布局"></a>此特性可以做出左边图片，右边文字的布局</h3><ul><li>只需要在父盒子内给图片设置好大小，左浮动，文字就会自动排到右边</li><li>给文字设置 margin-left ，给图片文字同时设置 vertical-align &#x3D; middle 即可</li></ul><h2 id="九、灵活利用行内块元素的间隙"><a href="#九、灵活利用行内块元素的间隙" class="headerlink" title="九、灵活利用行内块元素的间隙"></a>九、灵活利用行内块元素的间隙</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS学习笔记</title>
      <link href="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、HTML标签"><a href="#一、HTML标签" class="headerlink" title="一、HTML标签"></a>一、HTML标签</h2><h3 id="1-lt-p-gt-lt-br-gt-段落和换行标签"><a href="#1-lt-p-gt-lt-br-gt-段落和换行标签" class="headerlink" title="1.&lt;p&gt; &lt;/br&gt;段落和换行标签"></a>1.<code>&lt;p&gt; &lt;/br&gt;</code>段落和换行标签</h3><ul><li><p>段落标签</p><p><code>&lt;p&gt;&lt;/p&gt;</code></p><p>双标签，属于块级元素，可以设置宽高。</p></li><li><p>换行标签</p><p><code>&lt;/br&gt;</code></p><p>单标签，用于换行。</p></li></ul><h3 id="2-文本格式化标签"><a href="#2-文本格式化标签" class="headerlink" title="2.文本格式化标签"></a>2.文本格式化标签</h3><ul><li><p>加粗</p><p><code>&lt;strong&gt; &lt;b&gt;</code></p></li><li><p>倾斜</p><p><code>&lt;em&gt; &lt;i&gt;</code></p></li><li><p>删除线</p><p><code>&lt;del&gt; &lt;s&gt;</code></p></li><li><p>下划线</p><p><code>&lt;ins&gt; &lt;u&gt;</code></p><p>以上标签均为双标签！！！！</p></li></ul><h3 id="3-lt-img-gt-图像标签"><a href="#3-lt-img-gt-图像标签" class="headerlink" title="3.&lt;img&gt;图像标签"></a>3.<code>&lt;img&gt;</code>图像标签</h3><ul><li><p>主要属性：</p><p>1.src:”图片路径” :必须属性，可以是相对路径，也可以是超链接</p><p>2.alt:”文本” :替换文本，图像不能显示时显示文字</p><p>3.title:”文本” :提示文本，鼠标放在图像上时出现的文字</p></li><li><p>注意：</p><p>1.img图像标签为单标签</p><p>2.img标签属于行内元素，但是可以设置宽高！！！！</p></li></ul><h3 id="4-相对路径介绍"><a href="#4-相对路径介绍" class="headerlink" title="4.相对路径介绍"></a>4.相对路径介绍</h3><ul><li><p>以文件本身为参考，目标文件的路径</p><p>1.同一级路径：直接写目标文件名</p><p>2.下一级路径：&#x2F;</p><p>2.上一级路径：..&#x2F;</p></li></ul><h3 id="5-lt-a-gt-超链接标签"><a href="#5-lt-a-gt-超链接标签" class="headerlink" title="5.&lt;a&gt;超链接标签"></a>5.<code>&lt;a&gt;</code>超链接标签</h3><ul><li><code>&lt;a&gt;</code><strong>如果包含了有宽度的盒子，需要转换为块级元素</strong></li></ul><h3 id="6-特殊字符输入"><a href="#6-特殊字符输入" class="headerlink" title="6.特殊字符输入"></a>6.特殊字符输入</h3><ul><li><p>有时我们文本中会出现&lt;、&gt;等字符，它们与HTML标签框冲突，需要用特殊表达方式代替：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg" class title="特殊字符用法"> <p>只有空格、小于号、大于号三个用的比较多，重点记！！！！</p></li></ul><h3 id="7-lt-table-gt-表格标签"><a href="#7-lt-table-gt-表格标签" class="headerlink" title="7.&lt;table&gt;表格标签"></a>7.<code>&lt;table&gt;</code>表格标签</h3><ul><li><p>基本语法</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2.jpg" class title="表格标签基本语法"> </li><li><p>属性</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/3.jpg" class title="表格标签属性">  </li><li><p>表头单元格语法</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/4.jpg" class title="表头单元格基本语法">  </li><li><p>表格结构标签</p></li></ul><p>​       <img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/5.jpg" class title="表格结构">  </p><ul><li>合并相邻边框 <code>border-collapse:collapse</code></li></ul><h3 id="8-lt-ul-gt-lt-ol-gt-列表标签"><a href="#8-lt-ul-gt-lt-ol-gt-列表标签" class="headerlink" title="8.&lt;ul&gt; &lt;ol&gt;列表标签"></a>8.<code>&lt;ul&gt; &lt;ol&gt;</code>列表标签</h3><ul><li>无序列表<code>&lt;ul&gt;</code></li><li>有序列表<code>&lt;ol&gt;</code></li><li>自定义列表：</li></ul><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/6.jpg" class title="自定义列表">  <h3 id="9-lt-form-gt-表单域"><a href="#9-lt-form-gt-表单域" class="headerlink" title="9.&lt;form&gt;表单域"></a>9.<code>&lt;form&gt;</code>表单域</h3><ul><li><p>表单域是一个包含表单元素的区域，实现用户信息的收集和传递</p></li><li><p><code>&lt;form&gt;</code>会把它范围内的表单元素信息提交给服务器</p></li><li><p>语法与属性：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7.jpg" class title="表单域语法与属性"></li></ul><h3 id="10-lt-input-gt-表单标签"><a href="#10-lt-input-gt-表单标签" class="headerlink" title="10.&lt;input&gt;表单标签"></a>10.<code>&lt;input&gt;</code>表单标签</h3><ul><li><p><code>&lt;input&gt;</code>是一个单标签，属于行内元素，但是可以设置宽高</p></li><li><p>type属性值：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8.jpg" class title="input标签type属性">  <p><strong>单选按钮和复选框必须要有一样的name属性</strong></p></li><li><p>其他属性：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/9.jpg" class title="input标签其他属性">  </li><li><p>input表单是自带边框以及选中边框效果的，若要删除需要手动设置：</p><p><strong>border: 0;  手动消除自带边框</strong></p><p><strong>outline: none;  消除选中边框</strong></p></li></ul><h3 id="11-lt-label-gt-标签"><a href="#11-lt-label-gt-标签" class="headerlink" title="11.&lt;label&gt;标签"></a>11.<code>&lt;label&gt;</code>标签</h3><ul><li><p>label标签为input元素定义标注</p></li><li><p>搭配input单选复选框标签使用，实现点击文本也可以完成选择，增加用户体验</p></li><li><p>label的for属性因该与input的id属性一致</p></li><li><p>语法与注意事项：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.jpg" class title="label标签语法与核心"></li></ul><h3 id="12-lt-select-gt-表单标签"><a href="#12-lt-select-gt-表单标签" class="headerlink" title="12.&lt;select&gt;表单标签"></a>12.<code>&lt;select&gt;</code>表单标签</h3><ul><li><p>select表单标签即下拉列表</p></li><li><p>语法与注意事项：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/11.jpg" class title="select语法与注意事项"></li></ul><h3 id="13-lt-textarea-gt-表单标签"><a href="#13-lt-textarea-gt-表单标签" class="headerlink" title="13.&lt;textarea&gt;表单标签"></a>13.<code>&lt;textarea&gt;</code>表单标签</h3><ul><li><p>textarea属于多行文本输入框</p></li><li><p>语法：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/12.jpg" class title="textarea语法"></li></ul><h2 id="二、元素显示模式"><a href="#二、元素显示模式" class="headerlink" title="二、元素显示模式"></a>二、元素显示模式</h2><h3 id="1-块元素"><a href="#1-块元素" class="headerlink" title="1.块元素"></a>1.块元素</h3><ul><li><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>是最典型的块元素</p></li><li><p>块元素特点：</p><p>1.独占一行</p><p>2.宽高，内外边距可控</p><p>3.宽度默认为父元素的100%</p><p>4.是一个容器，可以放块元素和行内元素</p></li><li><p>注意！<strong>文字类元素内不能放块级元素</strong>，如<code>&lt;p&gt;、&lt;h1&gt;~&lt;h6&gt;</code></p></li></ul><h3 id="2-行内元素（内联元素）"><a href="#2-行内元素（内联元素）" class="headerlink" title="2.行内元素（内联元素）"></a>2.行内元素（内联元素）</h3><ul><li><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>是最典型的行内元素</p></li><li><p>行内元素特点：</p><p>1.相邻行内元素在一行上，一行可以显示多个</p><p>2.无法设置宽高，默认宽度就是它本身内容的宽度</p><p>3.行内元素只能容纳文本或其他行内元素</p></li><li><p>注意！</p><p>1.链接里面不能再放链接</p><p>2.特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式最安全</p></li></ul><h3 id="3-行内块元素"><a href="#3-行内块元素" class="headerlink" title="3.行内块元素"></a>3.行内块元素</h3><ul><li><p>像<code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>，它们同时具有块元素和行内元素的特点，则称它们为行内块元素</p></li><li><p>行内块元素特点：</p><p>1.和相邻行内元素(行内块)在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)</p><p>2.默认宽度就是它本身内容的宽度(行内元素特点)</p><p>3.宽高，内外边距可控(块元素特点)</p></li></ul><h3 id="4-元素显示模式总结"><a href="#4-元素显示模式总结" class="headerlink" title="4.元素显示模式总结"></a>4.元素显示模式总结</h3>  <img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/17.jpg" class title="元素显示模式总结"> <h2 id="三、CSS选择器"><a href="#三、CSS选择器" class="headerlink" title="三、CSS选择器"></a>三、CSS选择器</h2><h3 id="1-基础选择器"><a href="#1-基础选择器" class="headerlink" title="1.基础选择器"></a>1.基础选择器</h3><ul><li><p>标签选择器  div {****}</p></li><li><p>类选择器  class&#x3D;”aaa”  .aaa{****}</p></li><li><p>id选择器   id&#x3D;”aaa”   #aaa{****}</p></li><li><p>通配符选择器    <em>{</em>***} 选择所有标签</p></li><li><p>总结图：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/13.jpg" class title="基础选择器总结"></li></ul><h3 id="2-复合选择器"><a href="#2-复合选择器" class="headerlink" title="2.复合选择器"></a>2.复合选择器</h3><ul><li><p>后代选择器  空格隔开</p></li><li><p>子代选择器   &gt;</p></li><li><p>并集选择器    ,</p></li><li><p>链接伪类选择器：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/14.jpg" class title="链接伪类选择器"> </li><li><p>:focus 选择器：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/15.jpg" class title=":focus 选择器"> </li><li><p>总结图：</p><img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/16.jpg" class title="复合选择器总结"></li></ul><h3 id="3-权重-x2F-优先级"><a href="#3-权重-x2F-优先级" class="headerlink" title="3.权重 &#x2F; 优先级"></a>3.权重 &#x2F; 优先级</h3> <img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/18.jpg" class title="选择器权重 &#x2F; 优先级"><h2 id="四、CSS样式"><a href="#四、CSS样式" class="headerlink" title="四、CSS样式"></a>四、CSS样式</h2><h3 id="1-文字样式"><a href="#1-文字样式" class="headerlink" title="1.文字样式"></a>1.文字样式</h3><ul><li><p>文字风格 <code>font-style</code> 值：normal 正常 ， italic 斜体</p></li><li><p>文字粗细 <code>font-weight</code> 值：400正常  700加粗</p></li><li><p>文字大小 <code>font-size</code> 单位px</p></li><li><p>文字行高 <code>line-height</code> 单位px 高度与盒子一直即可实现文字垂直居中对齐</p></li><li><p>字体 <code>font-family</code></p></li><li><p>字体复合属性设置：</p><p><code>font: font-style font-weight font-size/line-height font-family;</code></p><p>一种写法：<code>font: 12px/1.5 字体</code>  即line-height是font-size的1.5倍</p><p>注意！</p><p>1.使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</p><p>2.不需要设置的属性可以省略(取默认值)，但<strong>必须保留 font-size 和 font-family 属性</strong>，否则 font 属性将不起作用</p></li><li><p>文本水平居中：<code>text-align = center</code> <strong>给父盒子设置可以让其中的行内元素和行内块元素均水平居中</strong></p></li><li><p>文本缩进：<code>text-indent</code> 值可取px和em，1em &#x3D; 一个文字大小</p></li><li><p>装饰文本：<code>text-decoration</code>  </p><p>none：没有装饰线，用于消除链接a自带下划线   underline：下划线    overline：上划线    line-through：删除线</p></li></ul><h3 id="2-背景图片"><a href="#2-背景图片" class="headerlink" title="2.背景图片"></a>2.背景图片</h3><ul><li><p>背景颜色 <code>background-color</code> 值：颜色值，transparent透明</p></li><li><p>背景图片 <code>background-image = url(图片网址或路径)</code></p></li><li><p>背景平铺 <code>background-repeat</code> 值：repeat：xy都重复，no-repeat：不重复，repeat-x，repeat-y</p></li><li><p>背景图片位置 <code>background-position: x y</code> 值：方位名词：top | bottom | right | left | center ，精确单位，百分数</p><p>1.参数是方位名词：</p><ul><li><p>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如left top和top left效果一致</p></li><li><p>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</p></li></ul><p>2.参数是精确单位：</p><ul><li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li><li>如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</li><li>负值向左向上，正值向右向下</li></ul><p>3.参数是混合单位: </p><ul><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul></li><li><p>背景图像固定 <code>background-attachment </code> 值：scroll 背景会跟着滚动  ， fixed 背景不会跟着滚动</p></li><li><p>背景色透明 <code>background: rgba(0,0,0,0.3)</code>最后一个是alpha透明度，取值0~1</p></li><li><p><strong>背景复合属性设置：</strong></p><p><code>background: background-color background-image = url() background-repeat background-attachment;background-position  颜色  图片  重复  固定  定位</code></p></li><li><p>背景图像大小 <code>background-size</code> 值：</p><p>1.cover：保持图像的纵横比并将图像缩放成将<strong>完全覆盖背景定位区域</strong>的最小大小，即宽和高都达到最大</p><p>2.contain：保持图像的纵横比并将图像缩放成将<strong>适合背景定位区域</strong>的最大大小，即宽或高其中一个达到最大就ok</p></li></ul><h3 id="3-边框border"><a href="#3-边框border" class="headerlink" title="3.边框border"></a>3.边框border</h3><ul><li><p>语法：</p>  <img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/19.jpg" class title="边框语法"> </li><li><p>边框样式 <code>border-style</code> 值：solid 实线，dashed 虚线，dotted 点线</p></li><li><p>合并相邻边框 <code>border-collapse:collapse</code></p></li><li><p>边框会影响盒子实际大小</p></li><li><p>圆角边框 <code>border-radius: 大小，百分比</code> <strong>设置为高度的一半即50%可实现圆</strong>，矩形则可实现胶囊</p><p>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角，分开写: </p><p><code>border-top-left-radius、border-top-right-radius、border-bottom-right-radius、border-bottom-left-radius</code></p></li></ul><h3 id="4-内边距padding"><a href="#4-内边距padding" class="headerlink" title="4.内边距padding"></a>4.内边距padding</h3><ul><li><code>padding：10px; 上下左右都是10px</code></li><li><code>padding：10px 20px;  上下10px  左右20px</code></li><li><code>padding：10px 20px 10px;  上10px   左右20px   下10px</code></li><li><code>padding：10px 10px 10px 10px; 上 下 左 右</code></li><li>如果盒子<strong>没有设置宽高，padding不会撑开盒子</strong>，设置了就会撑开</li></ul><h3 id="5-外边距margin"><a href="#5-外边距margin" class="headerlink" title="5.外边距margin"></a>5.外边距margin</h3><ul><li><p>简写与padding相同</p></li><li><p>外边距可以让块级盒子水平居中，但是盒子必须指定了宽度 width ，具体设置 <code>margin：0  auto;</code></p></li><li><p>块级元素使用margin实现水平居中，行内和行内块则是给父盒子添加 <code>text-align = center</code> 即可实现水平居中</p></li><li><p>上下外边距合并：<strong>给上下两个盒子分别添加下边距和上边距时，实际边距是这两个中的最大值，而不是叠加</strong></p></li><li><p>上外边距塌陷：<strong>当父盒子有上外边距时，子盒子设置较小的上外边距会无效</strong>，解决方案</p><p>1.可以为父元素定义上边框</p><p>2.可以为父元素定义上内边距</p><p>3.可以为父元素添加overflow:hidden</p><p><strong>浮动、固定，绝对定位</strong>的盒子不会出现此问题</p></li></ul><h3 id="6-阴影"><a href="#6-阴影" class="headerlink" title="6.阴影"></a>6.阴影</h3><ul><li><p>盒子阴影 语法：</p> <img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.jpg" class title="盒子阴影语法"> </li><li><p>文字阴影 语法：</p> <img src="/2022/10/15/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/21.jpg" class title="文字阴影语法"></li></ul><h3 id="7-用户鼠标样式"><a href="#7-用户鼠标样式" class="headerlink" title="7.用户鼠标样式"></a>7.用户鼠标样式</h3><ul><li><code>cursor: default;</code>  小白默认</li><li><code>cursor: pointer;</code>  小手</li><li><code>cursor: move;</code>  移动</li><li><code>cursor: text;</code>  文本</li><li><code>cursor: not-allowed;</code>  禁止</li></ul><h2 id="五、CSS布局"><a href="#五、CSS布局" class="headerlink" title="五、CSS布局"></a>五、CSS布局</h2><h3 id="1-网页布局准则："><a href="#1-网页布局准则：" class="headerlink" title="1.网页布局准则："></a>1.网页布局准则：</h3><ul><li><p>1.多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</p><p>2.先设置盒子大小,之后设置盒子的位置</p></li><li><p>为了约束浮动元素位置,我们网页布局一般采取的策略是:</p><p><strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。符合网页布局第一准侧</strong></p></li></ul><h3 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2.浮动"></a>2.浮动</h3><ul><li>浮动元素特性：脱离标准普通流的控制，移动到指定位置，浮动的盒子<strong>不再保留原先的位置</strong></li><li><strong>任何元素</strong>都可以浮动。不管原先是什么模式的元素，浮动的元素会一行内显示并且元素顶部对齐互相贴靠在一起(无缝隙)，如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。添加浮动之后<strong>具有行内块元素相似的特性</strong>。<br>如果<strong>块级盒子</strong>没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子只会影响浮动盒子后面的标准流不会影响前面的标准流</li></ul><h3 id="3-清除浮动"><a href="#3-清除浮动" class="headerlink" title="3.清除浮动"></a>3.清除浮动</h3><ul><li><p>为什么清除浮动？<strong>父盒子如果没设置高度，子盒子全浮动父盒子高度就是0了</strong>，会影响到后面标准流</p></li><li><p>清除浮动策略：闭合浮动：<code>clear: both;</code></p></li><li><p>方法：</p><p>1.额外标签</p><p>2.伪元素</p></li></ul><h3 id="4-定位"><a href="#4-定位" class="headerlink" title="4.定位"></a>4.定位</h3><ul><li><p><strong>相对定位</strong> <code>position: relative;</code> </p><p>特点：</p><p>1.它是相对于自己原来的位置来移动的(<strong>移动位置的时候参照点是自己原来的位置</strong>)</p><p>2.原来<strong>在标准流的位置继续占有</strong>，后面的盒子仍然以标准流的方式对特它。(<strong>不脱标，继续保留原来位置</strong>)因此，相对定位并没有脱标。它最典型的应用是给绝对定位当爹的</p></li><li><p><strong>绝对定位</strong> <code>position: absolute;</code> </p><p>特点：</p><p>1.如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为准定位( Document文档)</p><p>2.如果祖先元素有定位(相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置</p><p>3.绝对定位<strong>不再占有原先的位置</strong>(脱标)</p></li><li><p><strong>固定定位</strong> <code>position: fixed;</code> </p><p>特点：</p><p>1.以浏览器的可视窗口为参照点移动元素。跟父元素没有任何关系，不随滚动条滚动。</p><p>2.固定定位<strong>不在占有原先的位置</strong>，也是脱标的，可以看做是一种特殊的绝对定位。</p><p><strong>固定定位小技巧：</strong></p><ul><li><p>让固定定位的盒子left: 50%.走到浏览器可视区（也可以看做版心）的一半位置</p></li><li><p>让固定定位的盒子margin-left:版心宽度的一半距离。多走版心宽度的一半位置</p></li></ul></li><li><p><strong>粘性定位</strong> <code>position: sticky;</code></p><p> 特点：</p><p>1.跟随浏览器移动，以浏览器的可视窗口为参照点移动元素(固定定位特点)</p><p>2.粘性定位<strong>占有原先的位置</strong>(相对定位特点)</p><p>3.<strong>必须添加</strong>top . left、right、bottom其中一个才有效</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/14/hello-world/"/>
      <url>/2022/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
